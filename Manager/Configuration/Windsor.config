<?xml version="1.0"?>
<configuration>
  <!--
  Windsor容器中的对象其生命周期有以下几种方式：
  Singleton: 单例模式
  Transient: 临时对象模式，每次都创建一个新对象返回给请求者
  PerThread: 在当前执行线程上为单例模式
  Pooled: 用一个对象池管理请求对象，从对象池中返回对象实例
  Custom: 实现Castle.MicroKernel.Lifestyle.ILifestyleManager或从Castle.MicroKernel.Lifestyle.AbstractLifestyleManager继承，实现自定义的对象生命周期管理
  -->

  <!-- IOC依赖注入容器 -->
  <components>
    <!--案例-->
    <!-- <component
          id="命名空间+接口"
          service="接口, 命名空间"
          type="接口实现类, 命名空间"
          lifestyle="Singleton">
    </component>-->
    <component
    id="Base.Utility.ILogHelp"
    service="Base.Utility.ILogHelp,Base.Utility"
    type="Base.Utility.LogHelp, Base.Utility"
    lifestyle="Singleton">
      <parameters>
        <loggerName>DefaultLogger</loggerName>
        <configPath>Configuration\\Log4net.config</configPath>
      </parameters>
    </component>
    <!--用户-->
    <component id="UserService" service="IBusiness.IUserService,IBusiness" type="Business.UserService,Business" >
    </component>
    <component id="ManageProvider" service="Base.Kernel.IManageProvider,Base.Kernel" type="Base.Kernel.ManageProvider,Base.Kernel" >
    </component>
    
  </components>

</configuration>